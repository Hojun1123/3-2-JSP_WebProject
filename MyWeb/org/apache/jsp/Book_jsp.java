/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-11-25 14:53:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dto.Book;
import dao.BookRepository;
import dao.BookPageRepository;
import java.util.ArrayList;

public final class Book_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dto.Book");
    _jspx_imports_classes.add("dao.BookRepository");
    _jspx_imports_classes.add("dao.BookPageRepository");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"./exceptionNoBookId.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
	if(session.getAttribute("UserID") == null) {
		out.println("<script>alert('로그인 후 이용해주시길 바랍니다.')</script>");
		out.println("<script>location.href='login.jsp';</script>");	
	}  

      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.7.1.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./resources/css/book.css\">\r\n");
      out.write("<script type=\"text/javascript\" src=\"./resources/js/book.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("var imageList = [\"book_1.png\"];\r\n");
      out.write("var numberOfPages;\r\n");
      out.write("</script>\r\n");

	String bid = request.getParameter("id");
	Book book = new Book();
	BookRepository bookRepository = new BookRepository();
	book = bookRepository.getBookById(bid);
	String condition = book.getCondition();
	if(condition.equals("best"))
		condition = "최상";
	else if(condition.equals("top"))
		condition = "상";
	else if(condition.equals("middle"))
		condition = "중";
	else
		condition = "하";

	BookPageRepository bookPageRepository = new BookPageRepository();
  	ArrayList<String> flist = new ArrayList<String>();
  	flist = bookPageRepository.getList(bid);
  	String temp;
  	int i;
  	for(i=0; i<flist.size(); i++) {
  		temp = flist.get(i);

      out.write("\r\n");
      out.write("<script>imageList.push(\"");
      out.print(temp);
      out.write("\");</script>\r\n");

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("<p style=\"text-align:center;\"> <b>도서 미리보기 페이지입니다.</b>\r\n");
      out.write("<div id=\"book\">\r\n");
      out.write("  <div class=\"cover\">\r\n");
      out.write("  	<h3>");
      out.print(book.getName() );
      out.write("</h3>\r\n");
      out.write("  	<p> &nbsp;&nbsp;&nbsp;&nbsp;");
      out.print(book.getAuthor() );
      out.write("&nbsp;|&nbsp;");
      out.print(book.getPublisher() );
      out.write("&nbsp;|&nbsp;");
      out.print(book.getReleaseDate() );
      out.write("\r\n");
      out.write("  	<p>&nbsp;&nbsp;&nbsp;&nbsp;<div style=\"margin:20px\"><font size=\"4\" color=\"gray\"> &nbsp;&nbsp;&nbsp;&nbsp;");
      out.print( book.getDescription() );
      out.write("</font></div>\r\n");
      out.write("  	<br/>\r\n");
      out.write("  	<p> &nbsp;&nbsp;&nbsp;&nbsp;▶ ");
      out.print(book.getSeller() );
      out.write("님이 판매중인 책입니다.\r\n");
      out.write("  	<p> &nbsp;&nbsp;&nbsp;&nbsp; 도서 상태 : ");
      out.print(condition );
      out.write("\r\n");
      out.write("  	<p> &nbsp;&nbsp;&nbsp;&nbsp; 판매 가격 : ");
      out.print(book.getPrice() );
      out.write("원\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div id=\"controls\">\r\n");
      out.write("  <label for=\"page-number\">Page:</label> <input type=\"text\" size=\"3\" id=\"page-number\"> of <span id=\"number-pages\"></span>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("numberOfPages = imageList.length;\r\n");
      out.write("  // Adds the pages that the book will need\r\n");
      out.write("  function addPage(page, book) {\r\n");
      out.write("    //  First check if the page is already in the book\r\n");
      out.write("    if (!book.turn('hasPage', page)) {\r\n");
      out.write("      // Create an element for this page\r\n");
      out.write("      var element = $('<div />', {'class': 'page '+((page%2==0) ? 'odd' : 'even'), 'id': 'page-'+page}).html('<i class=\"loader\"></i>');\r\n");
      out.write("      // If not then add the page\r\n");
      out.write("      book.turn('addPage', element, page);\r\n");
      out.write("      // Let's assum that the data is comming from the server and the request takes 1s.\r\n");
      out.write("      setTimeout(function(){\r\n");
      out.write("    	  var sourceimg = imageList[page-1];\r\n");
      out.write("          element.html('<div class=\"data\">'+'<img style=\"position: absolute; top:0; left: 0;width:100%;height:100%;\" src=\"./resources/image/'+ imageList[page-1] +'\"/>'+'</div>');\r\n");
      out.write("      }, 1000);\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  $(window).ready(function(){\r\n");
      out.write("    $('#book').turn({acceleration: true,\r\n");
      out.write("              pages: numberOfPages,\r\n");
      out.write("              elevation: 50,\r\n");
      out.write("              gradients: !$.isTouch,\r\n");
      out.write("              when: {\r\n");
      out.write("                turning: function(e, page, view) {\r\n");
      out.write("\r\n");
      out.write("                  // Gets the range of pages that the book needs right now\r\n");
      out.write("                  var range = $(this).turn('range', page);\r\n");
      out.write("\r\n");
      out.write("                  // Check if each page is within the book\r\n");
      out.write("                  for (page = range[0]; page<=range[1]; page++) \r\n");
      out.write("                    addPage(page, $(this));\r\n");
      out.write("\r\n");
      out.write("                },\r\n");
      out.write("\r\n");
      out.write("                turned: function(e, page) {\r\n");
      out.write("                  $('#page-number').val(page);\r\n");
      out.write("                }\r\n");
      out.write("              }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("    $('#number-pages').html(numberOfPages);\r\n");
      out.write("\r\n");
      out.write("    $('#page-number').keydown(function(e){\r\n");
      out.write("\r\n");
      out.write("      if (e.keyCode==13)\r\n");
      out.write("        $('#book').turn('page', $('#page-number').val());\r\n");
      out.write("        \r\n");
      out.write("    });\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("  $(window).bind('keydown', function(e){\r\n");
      out.write("\r\n");
      out.write("    if (e.target && e.target.tagName.toLowerCase()!='input')\r\n");
      out.write("      if (e.keyCode==37)\r\n");
      out.write("        $('#book').turn('previous');\r\n");
      out.write("      else if (e.keyCode==39)\r\n");
      out.write("        $('#book').turn('next');\r\n");
      out.write("\r\n");
      out.write("  });\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
